{"version":3,"sources":["components/TodoListItem/TodoListItem.tsx","components/TodoList/TodoList.tsx","components/AddTodoForm/AddTodoForm.tsx","containers/App/App.tsx","index.tsx"],"names":["TodoListItem","todo","toggleTodo","className","complete","undefined","type","checked","onChange","text","TodoList","todos","map","key","AddTodoForm","addTodo","useState","newTodo","setNewTodo","value","e","target","onClick","preventDefault","initialTodos","App","setTodos","selectedTodo","newTodos","trim","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAQaA,G,MAA4C,SAAC,GAGnD,IAFHC,EAEE,EAFFA,KACAC,EACE,EADFA,WAEA,OACI,wBAAIC,UAAU,mBACV,2BAAOA,UAAWF,EAAKG,SAAW,gBAAaC,GAC3C,2BACIF,UAAU,sBACVG,KAAK,WACLC,QAASN,EAAKG,SACdI,SAAU,kBAAMN,EAAWD,MAE9BA,EAAKQ,SCZTC,G,MAAoC,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOT,EAAiB,EAAjBA,WACvD,OACI,wBAAIC,UAAU,aACTQ,EAAMC,KAAI,SAAAX,GACP,OAAO,kBAAC,EAAD,CAAcY,IAAKZ,EAAKQ,KAAMR,KAAMA,EAAMC,WAAYA,UCNhEY,G,MAA0C,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAAa,EACpCC,mBAAS,IAD2B,mBAC3DC,EAD2D,KAClDC,EADkD,KAalE,OACI,0BAAMf,UAAU,aACZ,2BAAOA,UAAU,mBAAmBG,KAAK,OAAOa,MAAOF,EAAST,SAZnD,SAACY,GAClBF,EAAWE,EAAEC,OAAOF,UAYhB,4BAAQhB,UAAU,oBAAoBG,KAAK,SAASgB,QATvC,SAACF,GAClBA,EAAEG,iBACFR,EAAQE,GACRC,EAAW,MAMP,eClBNM,G,MAA4B,IAErBC,EAAgB,WAAO,IAAD,EACPT,mBAASQ,GADF,mBAC1Bb,EAD0B,KACnBe,EADmB,KAqBjC,OACE,yBAAKvB,UAAU,OACb,yCACA,kBAAC,EAAD,CAAUQ,MAAOA,EAAOT,WArBG,SAAAyB,GAC7B,IAAMC,EAAWjB,EAAMC,KAAI,SAAAX,GACzB,OAAIA,IAAS0B,EACJ,2BACF1B,GADL,IAEEG,UAAWH,EAAKG,WAGbH,KAETyB,EAASE,MAYP,kBAAC,EAAD,CAAab,QATQ,SAAAE,GACJ,KAAnBA,EAAQY,QACNH,EAAS,GAAD,mBAAKf,GAAL,CAAY,CAACF,KAAMQ,EAASb,UAAU,WCrBpD0B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.9aae4a37.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoListItem.css';\n\ninterface TodoListItemProps {\n    todo: Todo;\n    toggleTodo: ToggleTodo;\n}\n\nexport const TodoListItem: React.FC<TodoListItemProps> = ({ \n    todo, \n    toggleTodo \n}) => {\n    return (\n        <li className=\"todo-list__item\">\n            <label className={todo.complete ? 'complete' : undefined}>\n                <input\n                    className=\"todo-list__checkbox\"\n                    type='checkbox' \n                    checked={todo.complete} \n                    onChange={() => toggleTodo(todo)} \n                />\n                {todo.text}\n            </label>\n        </li>\n    );\n};","import React from 'react';\nimport { TodoListItem } from '../TodoListItem/TodoListItem';\nimport \"./TodoList.css\";\n\ninterface TodoListProps {\n    todos: Array<Todo>;\n    toggleTodo: ToggleTodo;\n}\n\nexport const TodoList: React.FC<TodoListProps> = ({ todos, toggleTodo }) => {\n    return (\n        <ul className=\"todo-list\">\n            {todos.map(todo => {\n                return <TodoListItem key={todo.text} todo={todo} toggleTodo={toggleTodo}/>;\n            })}\n        </ul>\n    );\n};","import React, { useState, ChangeEvent, FormEvent } from 'react';\nimport \"./AddTodoForm.css\";\n\ninterface AddTodoFormProps {\n    addTodo: AddTodo;\n}\n\nexport const AddTodoForm: React.FC<AddTodoFormProps> = ({addTodo}) => {\n    const [newTodo, setNewTodo] = useState('');\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setNewTodo(e.target.value);\n    };\n\n    const handleSubmit = (e: FormEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        addTodo(newTodo);\n        setNewTodo('');\n    };\n\n    return (\n        <form className=\"todo-form\">\n            <input className=\"todo-form__input\" type='text' value={newTodo} onChange={handleChange}/>\n            <button className=\"todo-form__button\" type='submit' onClick={handleSubmit}>Add Todo</button>\n        </form>\n    );\n};\n","import React, { useState } from 'react';\nimport { TodoList } from '../../components/TodoList/TodoList';\nimport { AddTodoForm } from '../../components/AddTodoForm/AddTodoForm';\nimport \"./App.css\";\n\nconst initialTodos: Array<Todo> = [];\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState(initialTodos);\n\n  const toggleTodo: ToggleTodo = selectedTodo => {\n    const newTodos = todos.map(todo => {\n      if (todo === selectedTodo) {\n        return {\n          ...todo,\n          complete: !todo.complete\n        };\n      }\n      return todo;\n    });\n    setTodos(newTodos);\n  };\n\n  const addTodo: AddTodo = newTodo => {\n    newTodo.trim() !== '' && \n      setTodos([...todos, {text: newTodo, complete: false}]);\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>Todo List</h1>\n      <TodoList todos={todos} toggleTodo={toggleTodo} />\n      <AddTodoForm addTodo={addTodo} />\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './containers/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}